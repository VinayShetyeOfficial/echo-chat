generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String
  email         String    @unique
  password      String
  avatar        String?   // Profile picture URL
  isOnline      Boolean   @default(false)
  lastSeen      DateTime  @default(now())
  phoneNumber   String?
  bio           String?   // User biography
  status        String?   // Custom status message
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Authentication
  accounts      Account[]
  sessions      Session[]
  
  // Chat functionality
  channelMembers ChannelMember[]
  messages       Message[]
  reactions      Reaction[]
  
  // Channel preferences
  pinnedChannels PinnedChannel[]
  mutedChannels  MutedChannel[]
  
  // Authentication and verification status
  emailVerified      Boolean @default(false)
  emailVerifiedAt    DateTime?
  twoFactorEnabled   Boolean @default(false)
  lastPasswordChange DateTime?
  
  // Relations for new models
  passwordResets     PasswordReset[]
  otpCodes           OTPCode[]
  emailVerification  EmailVerification?
  invitations        Invitation[]     // User-created invitations
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chat functionality models
model Channel {
  id            String          @id @default(cuid())
  name          String
  description   String?
  type          String          // "direct" or "group"
  isPrivate     Boolean         @default(false)
  isArchived    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relations
  members       ChannelMember[]
  messages      Message[]
  lastMessageId String?         @unique
  lastMessage   Message?        @relation("ChannelLastMessage", fields: [lastMessageId], references: [id])
  
  // User preferences for this channel
  pinnedBy      PinnedChannel[]
  mutedBy       MutedChannel[]
  invitations   Invitation[]    // Channel invitations
  
  @@index([type])
}

model ChannelMember {
  id              String   @id @default(cuid())
  channelId       String
  userId          String
  role            String   @default("member") // "admin", "member"
  joinedAt        DateTime @default(now())
  lastReadMessage String?  // ID of last read message
  
  channel         Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@index([userId])
}

model Message {
  id              String       @id @default(cuid())
  content         String
  isEdited        Boolean      @default(false)
  channelId       String
  userId          String
  replyToId       String?      // For reply threads
  replyTo         Message?     @relation("MessageReplies", fields: [replyToId], references: [id])
  replies         Message[]    @relation("MessageReplies")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  channel         Channel      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions       Reaction[]
  attachments     Attachment[]
  
  // Last message in channel relation
  lastMessageFor  Channel?     @relation("ChannelLastMessage")
  
  @@index([channelId])
  @@index([userId])
  @@index([createdAt])
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type      String   // "image", "audio", "file"
  url       String   // Storage URL for the file
  fileName  String
  fileSize  Int
  mimeType  String
  width     Int?     // For images
  height    Int?     // For images
  duration  Int?     // For audio (in seconds)
  createdAt DateTime @default(now())
  
  @@index([messageId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  userId    String
  createdAt DateTime @default(now())
  
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

// User preferences models
model PinnedChannel {
  id         String   @id @default(cuid())
  userId     String
  channelId  String
  pinnedAt   DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@unique([userId, channelId])
}

model MutedChannel {
  id         String   @id @default(cuid())
  userId     String
  channelId  String
  mutedAt    DateTime @default(now())
  mutedUntil DateTime?
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@unique([userId, channelId])
}

// For password reset functionality
model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
}

// For OTP authentication
model OTPCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // "login", "verification", "password-reset"
  expires   DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
}

// For tracking email verification status
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  verified  Boolean  @default(false)
  verifiedAt DateTime?
  
  @@index([userId])
}

// For invite links functionality
model Invitation {
  id          String   @id @default(cuid())
  code        String   @unique
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  email       String?  // Optional: pre-filled email if inviting a specific person
  channelId   String?  // Optional: for invites to specific channels
  channel     Channel? @relation(fields: [channelId], references: [id], onDelete: SetNull)
  expires     DateTime
  used        Boolean  @default(false)
  usedAt      DateTime?
  usedById    String?
  createdAt   DateTime @default(now())
  
  @@index([createdById])
  @@index([code])
} 